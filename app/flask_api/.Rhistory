black <- list()
# 'game' represents the movetext for a single game, so this loops over all games' movetexts
for (game in London.PGN$Movetext)
{
# use regex to grab everything in movetext that is between a period and a space.
# these are white's moves
#w <- str_match_all(game, "(?<=\\.)(.*?)(?=\ )")
#white <- c(white,list(w[[1]][,1]))
# for black, the best way I could think of to get every move is to split the string at
# the spaces and discard every other element of the list
all.moves <- strsplit(game, " ")
w <- list(all.moves[[1]][c(T,F)])
w <- sapply(w,function(x){
as.numeric(gsub("^.*\\.","",as.character(x)))
white <- c(white,w)
})
b <- list(all.moves[[1]][c(F,T)])
black <- c(black,b)
}
library(bigchess)
library(magrittr) # allows me to use '%>% to atuomatically use an output of one command as input for another
# load one PGN:
e6.PGN <- file.path("./", 'London2e6.pgn') %>% read.pgn()
# remove all but first 9 columns
e6.PGN <- e6.PGN[,1:9]
# Each game is stored as a row in the dataframe. let's look at the first game as an example:
head(e6.PGN, 1)
# I do the exact same thing for the second PGN:
g6.PGN <- file.path("./", 'London2g6.pgn') %>% read.pgn()
g6.PGN <- g6.PGN[,1:9]
# merge the dataframes:
London.PGN <- merge(g6.PGN,e6.PGN, all = T)
# Let's look at the final dataframe structure
str(London.PGN)
library(stringr)
# These will be a list of lists of white and black moves. eventually these will be our new columns
white <- list()
black <- list()
# 'game' represents the movetext for a single game, so this loops over all games' movetexts
for (game in London.PGN$Movetext)
{
# use regex to grab everything in movetext that is between a period and a space.
# these are white's moves
#w <- str_match_all(game, "(?<=\\.)(.*?)(?=\ )")
#white <- c(white,list(w[[1]][,1]))
# for black, the best way I could think of to get every move is to split the string at
# the spaces and discard every other element of the list
all.moves <- strsplit(game, " ")
w <- list(all.moves[[1]][c(T,F)])
w <- sapply(w,function(x){
as.numeric(gsub("^.*\\.","",as.character(x)))
white <- c(white,w)
})
b <- list(all.moves[[1]][c(F,T)])
black <- c(black,b)
}
result_sus <- ggplot(all_runs, aes(x = as.factor(Susceptible_Competition), fill = interaction(result, as.factor(Susceptible_Competition)))) + geom_bar(position = "fill")  +
scale_fill_manual("legend", values = c(
"no bacteriocin production.0" = no_prod,
"extinction.0" = "white",
"bacteriocin production.0" = reds[1],
"bacteriocin production.25" = reds[2],
"no bacteriocin production.25" = no_prod,
"extinction.25" = "white",
"bacteriocin production.50" = reds[3],
"no bacteriocin production.50" = no_prod,
"extinction.50" = "white",
"bacteriocin production.75" = reds[4],
"no bacteriocin production.75" = no_prod,
"extinction.75" = "white",
"bacteriocin production.100" = reds[5],
"no bacteriocin production.100" = no_prod,
"extinction.100" = "white"),guide=F) + theme_minimal() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
#import datasets ----
library(tidyverse)
library(energy)
library(gridExtra)
library(ggplot2)
library(ggthemr)
library(reshape2)
library(mgcv)
library(survival)
library(survminer)
library(gtools)
library(gtools)
library("phangorn")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("phangorn")
library("phangorn")
dist <- readDist(CTS_Dist.distmat, format = "phylip")
dist <- readDist('CTS_Dist.distmat', format = "phylip")
dist <- readDist('/CTS_Dist.distmat', format = "phylip")
dist <- readDist('./CTS_Dist.distmat', format = "phylip")
dist <- readDist('./CTS_Dist.distmat', format = "phylip")
dist <- readDist('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat', format = "phylip")
dist <- readDist('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat', format = "phylip")
install.packages("remotes")
remotes::install_github("SWittouck/tidyorthogroups")
dist <- readDist('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat', format = "phylip")
library("SWittouck/tidyorthogroups")
library("tidyorthogroups")
dist <- read_phylip_distmat('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat', format = "phylip")
library(devtools)
install.packages("devtools")
install_github("SWittouck/tidyorthogroups")
install.packages("remotes")
remotes::install_github("SWittouck/tidyorthogroups")
library(tidyorthogroups)
remotes::install_github("SWittouck/tidyorthogroups")
install.packages("ggtree")
devtools::install_github("YuLab-SMU/ggtree")
devtools::install_github("SWittouck/tidyorthogroups")
library(tidyorthogroups)
library(tidygenomes)
dist <- read_phylip_distmat('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat', format = "phylip")
dist <- read_phylip_distmat('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat', skip=7)
View(dist)
dist <- read_phylip_distmat('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat', skip=1)
dist <- read_phylip_distmat('/Users/cwf30/Desktop/Code/SARE_APP/flask_api/CTS_Dist.distmat')
View(dist)
library(dplyr)
filteredDist <- dplyr::filter(dist, !grepl('_PG', sequence_2))
View(filteredDist)
filteredDist <- dplyr::filter(filteredDist, grepl('_PG', sequence_1))
View(filteredDist)
filteredDist <- dplyr::filter(dist, !grepl('_PG', sequence_2))
filteredDist <- dplyr::filter(filteredDist, grepl('_PG', sequence_1))
sliced <- filteredDist %>% group_by(filteredDist, sequence_2) %>% slice_min(order_by = distance)
sliced <- group_by(filteredDist, sequence_2) %>% slice_min(order_by = distance)
View(sliced)
sliced$PG <- sub(".*_PG", "", sliced$sequence_1)
meta <- read.csv("/Users/cwf30/Desktop/Code/SARE_APP/flask_api/syringae_metadata.csv")
View(meta)
sliced %>%
sliced %>%
rename(
Biosample = sequence_2)
merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
sliced <- sliced %>%
rename(
Biosample = sequence_2)
merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
meta_new <- merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
View(meta_new)
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/flask_api/syringae_metadata.csv")
meta_new %>% mutate_all(~replace(., is.na(.), 0))
meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), 0))
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv")
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
meta_new <- unique(meta_new)
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
sliced$PG[which(sliced$distance > 4)] = "0"
meta_new <- merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
meta_new <- unique(meta_new)
#meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), 0))
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
meta_new <- meta_new %>%
rename(
name = OTUID)
#meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), 0))
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), "0"))
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
unique(meta_new$PG)
sliced <- group_by(filteredDist, sequence_2) %>% slice_min(order_by = distance)
sliced$PG <- sub(".*_PG", "", sliced$sequence_1)
sliced$PG[which(sliced$distance > 6)] = "0"
sliced <- sliced %>%
rename(
Biosample = sequence_2)
meta <- read.csv("/Users/cwf30/Desktop/Code/SARE_APP/flask_api/syringae_metadata.csv")
meta_new <- merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
meta_new <- unique(meta_new)
meta_new <- meta_new %>%
rename(
name = OTUID)
meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), "0"))
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
unique(meta_new$PG)
sliced <- group_by(filteredDist, sequence_2) %>% slice_min(order_by = distance)
sliced$PG <- sub(".*_PG", "", sliced$sequence_1)
sliced$PG[which(sliced$distance > 6)] = "0"
sliced <- sliced %>%
rename(
Biosample = sequence_2)
meta <- read.csv("/Users/cwf30/Desktop/Code/SARE_APP/flask_api/syringae_metadata.csv")
meta_new <- merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
meta_new <- unique(meta_new)
meta_new <- meta_new %>%
rename(
name = OTUID)
meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), "0"))
meta_new <- merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
meta <- read.csv("/Users/cwf30/Desktop/Code/SARE_APP/flask_api/syringae_metadata.csv")
meta <- subset(meta, select = -c(PG))
meta_new <- merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
meta_new <- unique(meta_new)
meta_new <- meta_new %>%
rename(
name = OTUID)
meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), "0"))
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
unique(meta_new$PG)
sort(unique(meta_new$PG))
sliced <- group_by(filteredDist, sequence_2) %>% slice_min(order_by = distance)
sliced$PG <- sub(".*_PG", "", sliced$sequence_1)
sliced$PG[which(sliced$distance > 6)] = "> 6% ANI"
sliced <- sliced %>%
rename(
Biosample = sequence_2)
meta <- read.csv("/Users/cwf30/Desktop/Code/SARE_APP/flask_api/syringae_metadata.csv")
meta <- subset(meta, select = -c(PG))
meta_new <- merge(x = meta, y = sliced[ , c("PG", "Biosample")], by = "Biosample", all.x=TRUE)
meta_new <- unique(meta_new)
meta_new <- meta_new %>%
rename(
name = OTUID)
meta_new <-meta_new %>% mutate_all(~replace(., is.na(.), "Missing Data"))
write.csv(meta_new, "/Users/cwf30/Desktop/Code/SARE_APP/d3-tree-component/public/syringae_metadata.csv",row.names = FALSE)
sort(unique(meta_new$PG))
View(dist)
View(filteredDist)
View(sliced)
sliced <- group_by(filteredDist, sequence_2) %>% slice_min(order_by = distance)
View(sliced)
load("/Users/cwf30/Desktop/Code/tailocin_sim_analysis/sim.RData")
library(ape)
library(phangorn)
library(tidyverse)
library(reshape2)
seqs <- read.phyDat("aligned_tails.fasta", format = "FASTA", type = "DNA")
setwd("~/Desktop/Code/SARE_APP/flask_api")
seqs <- read.phyDat("aligned_tails.fasta", format = "FASTA", type = "DNA")
dm  <- dist.ml(seqs)
tib <- as_tibble(dm)
df <- melt(as.matrix(dm), varnames = c("row", "col"))
View(df)
?dist.ml
?dist
?dist.dna
dm  <- dist.dna(seqs)
dm  <- dist.dna(as.DNAbin(seqs))
df <- melt(as.matrix(dm), varnames = c("row", "col"))
View(df)
metadata <- read.csv("syringae_metadata.csv")
View(metadata)
df$row <- sub(" .*", "", df$row)
df$col <- sub(" .*", "", df$col)
df_pathovars <- df
df_pathovars$path_row[match(df_pathovars$row, metadata$Biosample)] <- metadata$PATHOVAR
df_pathovars$row[match(df_pathovars$row, metadata$Biosample)] <- metadata$PATHOVAR
df_pathovars$row_2[match(df_pathovars$row, metadata$Biosample)] <- metadata$PATHOVAR
View(df_pathovars)
df_pathovars <- df
df_pathovars$row_2[match(df_pathovars$row, metadata$Biosample)] <- metadata$PATHOVAR
df_pathovars$row[match(df_pathovars$row, metadata$Biosample)] <- metadata$PATHOVAR
df_pathovars <- df
df_pathovars <- df
df_pathovars$row2 <- metadata$PATHOVAR[match(df_pathovars$row, metadata$Biosample)]
df_pathovars <- df
df_pathovars$row <- metadata$PATHOVAR[match(df_pathovars$row, metadata$Biosample)]
df_pathovars$col <- metadata$PATHOVAR[match(df_pathovars$col, metadata$Biosample)]
df_species <- df
df_species$row <- metadata$SPECIES[match(df_species$row, metadata$Biosample)]
df_species$col <- metadata$SPECIES[match(df_species$col, metadata$Biosample)]
View(df_species)
Pathovar_means <- aggregate(value~row+col,data=df_pathovars,mean)
View(Pathovar_means)
Species_means <- aggregate(value~row+col,data=df_species,mean)
View(Species_means)
?spread
Pathovar_mat = Pathovar_means %>%
spread(row, value, fill=0) %>%
column_to_rownames(var="col") %>%
as.matrix
View(Pathovar_mat)
Species_mat = Species_means %>%
spread(row, value, fill=0) %>%
column_to_rownames(var="col") %>%
as.matrix
View(Species_mat)
df_pathovars <- df_pathovars[is.finite(rowSums(df_pathovars)),]
df_species <- df_species[is.finite(rowSums(df_species)),]
?rowSums
?rowSums
df_pathovars <- df_pathovars[is.finite(base::rowSums(df_pathovars)),]
df_pathovars <- df_pathovars[is.finite(df_pathovars$value),]
df_species <- df_species[is.finite(df_species$value),]
Pathovar_means <- aggregate(value~row+col,data=df_pathovars,mean)
Species_means <- aggregate(value~row+col,data=df_species,mean)
Pathovar_mat = Pathovar_means %>%
spread(row, value, fill=0) %>%
column_to_rownames(var="col") %>%
as.matrix
Species_mat = Species_means %>%
spread(row, value, fill=0) %>%
column_to_rownames(var="col") %>%
as.matrix
plot(Pathovar_mat)
"coldiss" <- function(D, nc = 4, byrank = TRUE, diag = FALSE)
{
require(gclus)
if (max(D)>1) D <- D/max(D)
if (byrank) {
spe.color = dmat.color(1-D, cm.colors(nc))
}
else {
spe.color = dmat.color(1-D, byrank=FALSE, cm.colors(nc))
}
spe.o = order.single(1-D)
speo.color = spe.color[spe.o,spe.o]
op = par(mfrow=c(1,2), pty="s")
if (diag) {
plotcolors(spe.color, rlabels=attributes(D)$Labels,
main="Dissimilarity Matrix",
dlabels=attributes(D)$Labels)
plotcolors(speo.color, rlabels=attributes(D)$Labels[spe.o],
main="Ordered Dissimilarity Matrix",
dlabels=attributes(D)$Labels[spe.o])
}
else {
plotcolors(spe.color, rlabels=attributes(D)$Labels,
main="Dissimilarity Matrix")
plotcolors(speo.color, rlabels=attributes(D)$Labels[spe.o],
main="Ordered Dissimilarity Matrix")
}
par(op)
}
coldiss(Pathovar_mat)
install.packages(gclus)
install.packages("gclus")
coldiss(Pathovar_mat)
library(ggplot2)
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile()
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile()
ggplot(data = Pathovar_means, aes(x=row, y=reorder(col, value), fill=value)) +
geom_tile()
ggplot(data = Species_means, aes(x=row, y=reorder(col, value), fill=value)) +
geom_tile()
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile()
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue",
"white", "red"),
values=rescale(c(0,0.2,1.6)),
guide="colorbar")
install.packages("scale")
install.packages("scales")
install.packages("scales")
library("scales")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue",
"white", "red"),
values=rescale(c(0,0.2,1.6)),
guide="colorbar")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue",
"white", "red"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkgreen",
"yellow", "red"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkgreen",
"yellow", "white"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue",
"green", "white"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue",
"blue", "white"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("darkblue",
"yellow", "white"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.4,1.6)),
guide="colorbar")
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.2,1.6)),
guide="colorbar")
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar")
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90))
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90))
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.2,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90))
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.5,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90))
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.5,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90))
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.5,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90))
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90))
foo <- cmdscale(Pathovar_mat, k = 2)
plot(-foo)
View(foo)
foo <- cmdscale(Pathovar_mat, k = 3)
plot(-foo)
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90), name = "genetic distance")
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar")+
scale_x_discrete(guide = guide_axis(angle = 90), name = "genetic distance") +
scale_fill_continuous(name = "genetic distance")
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar",name = "genetic distance")+
scale_x_discrete(guide = guide_axis(angle = 90), name = "genetic distance")
ggplot(data = Pathovar_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.1,1.6)),
guide="colorbar",name = "genetic distance")+
scale_x_discrete(guide = guide_axis(angle = 90), name = "")+
scale_y_discrete(name = "")
ggplot(data = Species_means, aes(x=row, y=col, fill=value)) +
geom_tile() +
scale_fill_gradientn(colours=c("red",
"yellow", "white"),
values=rescale(c(0,0.5,1.6)),
guide="colorbar",name = "genetic distance")+
scale_x_discrete(guide = guide_axis(angle = 90), name = "")+
scale_y_discrete(name = "")
